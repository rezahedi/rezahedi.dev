---
import BaseHead from '@components/BaseHead.astro';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import TOC from '@components/TOC.astro';

export interface Props {
	content: {
		title: string;
		description: string;
		pubDate?: string;
		updatedDate?: string;
		image?: string;
		link?: string;
		github?: string;
		category?: string;
	},
	headings: {
		slug: string;
		text: string;
		depth: number;
	}[]
}

const {
	content: { title, description, pubDate, updatedDate, image, link, github, category }, headings
} = Astro.props;
---

<html lang="en">
<head>
<BaseHead title={title} description={description} image={image} />
<style>
.title {
	font-size: 2em;
	margin: 0.25em 0 0;
}
.links{
	display: flex;
	gap: 10px;
	margin-top:15px; padding-top:15px;
	border-top: 1px solid rgba(var(--text), .1);
	justify-content:left;
}
.links a{
	display: flex;
	gap:5px;
	flex-direction: column;
	align-items: center;
	padding:10px;
	font-size: 0.9em;
	text-decoration: none;
	transition: all .2s ease-in-out;
	opacity: 0.7;
	border-radius: 10px;
	color:rgb(var(--text))
}
.links a:hover{
	background-color: rgba(var(--text), .08);
	
	opacity: 1;
}
.links svg{
	width: 20px;
	height: 20px;
	fill:rgb(var(--text));
	margin-right: 5px;
	vertical-align: middle;
}
</style>
</head>

<body class="dark projects">
	<Header />
	<main>
		<header class="article-header">
			<div class="container">
				<div class="article-title">
					<h2>{category}</h2>
					<h1 class="title">{title}</h1>
					{pubDate && <time>{pubDate}</time>}
				</div>
			</div>
		</header>

		<div class="container">
			<article>
				{headings && headings.length > 0 && (
					<nav class="article-toc">
						<h3>Table of Content</h3>
						<TOC headings={headings} />
						<div class="links">
							{github && <a href={github} target="_blank">
								<svg viewBox="0 0 512 512">
									<path d="M256,32C132.3,32,32,134.8,32,261.7c0,101.5,64.2,187.5,153.2,217.9c11.2,2.1,15.3-5,15.3-11.1   c0-5.5-0.2-19.9-0.3-39.1c-62.3,13.9-75.5-30.8-75.5-30.8c-10.2-26.5-24.9-33.6-24.9-33.6c-20.3-14.3,1.5-14,1.5-14   c22.5,1.6,34.3,23.7,34.3,23.7c20,35.1,52.4,25,65.2,19.1c2-14.8,7.8-25,14.2-30.7c-49.7-5.8-102-25.5-102-113.5   c0-25.1,8.7-45.6,23-61.6c-2.3-5.8-10-29.2,2.2-60.8c0,0,18.8-6.2,61.6,23.5c17.9-5.1,37-7.6,56.1-7.7c19,0.1,38.2,2.6,56.1,7.7   c42.8-29.7,61.5-23.5,61.5-23.5c12.2,31.6,4.5,55,2.2,60.8c14.3,16.1,23,36.6,23,61.6c0,88.2-52.4,107.6-102.3,113.3   c8,7.1,15.2,21.1,15.2,42.5c0,30.7-0.3,55.5-0.3,63c0,6.1,4,13.3,15.4,11C415.9,449.1,480,363.1,480,261.7   C480,134.8,379.7,32,256,32z"/>
								</svg>
								Github
							</a>}
							{link && <a href={link} target="_blank">
								<svg viewBox="0 0 512 512"><polygon points="96,288 243,288 191.9,480 416,224 269,224 320,32 "/></svg>
								Live Demo
							</a>}
						</div>
					</nav>
				)}
				{updatedDate && (
					<div>
						Last updated on <time>{updatedDate}</time>
					</div>
				)}
				<div class="article-content">
					<slot />
				</div>
			</article>
		</div>
	</main>
	<Footer />
</body>
</html>
<script>
addIntersectionObserver();

function addIntersectionObserver() {
	const observer = new IntersectionObserver((sections) => {
		console.log('sections', sections);
		sections.forEach((section) => {
			const heading = section.target.querySelector('h2, h3, h4, h5');
			if (!heading) return;
			const id = heading.getAttribute('id');

			// Get the link to this section's heading
			const link = document.querySelector(`nav.toc li a[href="#${id}"]`);
			if (!link) return;

			// Add/remove the .active class based on whether the
			// section is visible
			const addRemove = section.intersectionRatio > 0 ? 'add' : 'remove';
			link.classList[addRemove]('active');
		});
	});

	document.querySelectorAll('.article-content section').forEach((section) => {
		observer.observe(section);
	})
}
</script>
